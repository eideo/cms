package com.sbiao360.core.util;

public class DES {

	/* initial permutation IP */
	static int ip[] = { 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20,
			12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16,
			8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61,
			53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7 };

	/* final permutation IP^-1 */
	static int fp[] = { 40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23,
			63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61,
			29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
			34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25 };
	/* expansion operation matrix */
	static int ei[] = { 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12,
			13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23,
			24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1 };
	/* The (in)famous S-boxes */
	static int sbox[][] = {
			/* S1 */
			{ 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7, 0, 15, 7,
					4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8, 4, 1, 14, 8,
					13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0, 15, 12, 8, 2, 4,
					9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 },

			/* S2 */
			{ 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10, 3, 13, 4,
					7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5, 0, 14, 7, 11,
					10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15, 13, 8, 10, 1, 3,
					15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 },

			/* S3 */
			{ 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8, 13, 7, 0,
					9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1, 13, 6, 4, 9, 8,
					15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7, 1, 10, 13, 0, 6, 9,
					8, 7, 4, 15, 14, 3, 11, 5, 2, 12 },

			/* S4 */
			{ 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15, 13, 8, 11,
					5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9, 10, 6, 9, 0, 12,
					11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4, 3, 15, 0, 6, 10, 1,
					13, 8, 9, 4, 5, 11, 12, 7, 2, 14 },

			/* S5 */
			{ 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9, 14, 11, 2,
					12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6, 4, 2, 1, 11, 10,
					13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14, 11, 8, 12, 7, 1, 14,
					2, 13, 6, 15, 0, 9, 10, 4, 5, 3 },

			/* S6 */
			{ 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11, 10, 15, 4,
					2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8, 9, 14, 15, 5, 2,
					8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6, 4, 3, 2, 12, 9, 5, 15,
					10, 11, 14, 1, 7, 6, 0, 8, 13 },

			/* S7 */
			{ 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1, 13, 0, 11,
					7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6, 1, 4, 11, 13,
					12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2, 6, 11, 13, 8, 1, 4,
					10, 7, 9, 5, 0, 15, 14, 2, 3, 12 },

			/* S8 */
			{ 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7, 1, 15, 13,
					8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2, 7, 11, 4, 1, 9,
					12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8, 2, 1, 14, 7, 4, 10,
					8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } };

	/* 32-bit permutation function P used on the output of the S-boxes */
	static int p32i[] = { 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18,
			31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25 };
	// #endif

	/* permuted choice table (key) */
	static final int pc1[] = { 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34,
			26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36,

			63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61,
			53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 };

	/* number left rotations of pc1 */
	static final int totrot[] = { 1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21,
			23, 25, 27, 28 };

	/* permuted choice key (table) */
	static final int pc2[] = { 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23,
			19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30,
			40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 };

	/* End of DES-defined tables */

	/* bit 0 is left-most in byte */
	static final int bytebit[] = { 0200, 0100, 040, 020, 010, 04, 02, 01 };

	// This file is mostly generated by Phil Karn's gensp.c

	static final int Spbox[][] = {
			{ 0x01010400, 0x00000000, 0x00010000, 0x01010404, 0x01010004,
					0x00010404, 0x00000004, 0x00010000, 0x00000400, 0x01010400,
					0x01010404, 0x00000400, 0x01000404, 0x01010004, 0x01000000,
					0x00000004, 0x00000404, 0x01000400, 0x01000400, 0x00010400,
					0x00010400, 0x01010000, 0x01010000, 0x01000404, 0x00010004,
					0x01000004, 0x01000004, 0x00010004, 0x00000000, 0x00000404,
					0x00010404, 0x01000000, 0x00010000, 0x01010404, 0x00000004,
					0x01010000, 0x01010400, 0x01000000, 0x01000000, 0x00000400,
					0x01010004, 0x00010000, 0x00010400, 0x01000004, 0x00000400,
					0x00000004, 0x01000404, 0x00010404, 0x01010404, 0x00010004,
					0x01010000, 0x01000404, 0x01000004, 0x00000404, 0x00010404,
					0x01010400, 0x00000404, 0x01000400, 0x01000400, 0x00000000,
					0x00010004, 0x00010400, 0x00000000, 0x01010004 },
			{ 0x80108020, 0x80008000, 0x00008000, 0x00108020, 0x00100000,
					0x00000020, 0x80100020, 0x80008020, 0x80000020, 0x80108020,
					0x80108000, 0x80000000, 0x80008000, 0x00100000, 0x00000020,
					0x80100020, 0x00108000, 0x00100020, 0x80008020, 0x00000000,
					0x80000000, 0x00008000, 0x00108020, 0x80100000, 0x00100020,
					0x80000020, 0x00000000, 0x00108000, 0x00008020, 0x80108000,
					0x80100000, 0x00008020, 0x00000000, 0x00108020, 0x80100020,
					0x00100000, 0x80008020, 0x80100000, 0x80108000, 0x00008000,
					0x80100000, 0x80008000, 0x00000020, 0x80108020, 0x00108020,
					0x00000020, 0x00008000, 0x80000000, 0x00008020, 0x80108000,
					0x00100000, 0x80000020, 0x00100020, 0x80008020, 0x80000020,
					0x00100020, 0x00108000, 0x00000000, 0x80008000, 0x00008020,
					0x80000000, 0x80100020, 0x80108020, 0x00108000 },
			{ 0x00000208, 0x08020200, 0x00000000, 0x08020008, 0x08000200,
					0x00000000, 0x00020208, 0x08000200, 0x00020008, 0x08000008,
					0x08000008, 0x00020000, 0x08020208, 0x00020008, 0x08020000,
					0x00000208, 0x08000000, 0x00000008, 0x08020200, 0x00000200,
					0x00020200, 0x08020000, 0x08020008, 0x00020208, 0x08000208,
					0x00020200, 0x00020000, 0x08000208, 0x00000008, 0x08020208,
					0x00000200, 0x08000000, 0x08020200, 0x08000000, 0x00020008,
					0x00000208, 0x00020000, 0x08020200, 0x08000200, 0x00000000,
					0x00000200, 0x00020008, 0x08020208, 0x08000200, 0x08000008,
					0x00000200, 0x00000000, 0x08020008, 0x08000208, 0x00020000,
					0x08000000, 0x08020208, 0x00000008, 0x00020208, 0x00020200,
					0x08000008, 0x08020000, 0x08000208, 0x00000208, 0x08020000,
					0x00020208, 0x00000008, 0x08020008, 0x00020200 },
			{ 0x00802001, 0x00002081, 0x00002081, 0x00000080, 0x00802080,
					0x00800081, 0x00800001, 0x00002001, 0x00000000, 0x00802000,
					0x00802000, 0x00802081, 0x00000081, 0x00000000, 0x00800080,
					0x00800001, 0x00000001, 0x00002000, 0x00800000, 0x00802001,
					0x00000080, 0x00800000, 0x00002001, 0x00002080, 0x00800081,
					0x00000001, 0x00002080, 0x00800080, 0x00002000, 0x00802080,
					0x00802081, 0x00000081, 0x00800080, 0x00800001, 0x00802000,
					0x00802081, 0x00000081, 0x00000000, 0x00000000, 0x00802000,
					0x00002080, 0x00800080, 0x00800081, 0x00000001, 0x00802001,
					0x00002081, 0x00002081, 0x00000080, 0x00802081, 0x00000081,
					0x00000001, 0x00002000, 0x00800001, 0x00002001, 0x00802080,
					0x00800081, 0x00002001, 0x00002080, 0x00800000, 0x00802001,
					0x00000080, 0x00800000, 0x00002000, 0x00802080 },
			{ 0x00000100, 0x02080100, 0x02080000, 0x42000100, 0x00080000,
					0x00000100, 0x40000000, 0x02080000, 0x40080100, 0x00080000,
					0x02000100, 0x40080100, 0x42000100, 0x42080000, 0x00080100,
					0x40000000, 0x02000000, 0x40080000, 0x40080000, 0x00000000,
					0x40000100, 0x42080100, 0x42080100, 0x02000100, 0x42080000,
					0x40000100, 0x00000000, 0x42000000, 0x02080100, 0x02000000,
					0x42000000, 0x00080100, 0x00080000, 0x42000100, 0x00000100,
					0x02000000, 0x40000000, 0x02080000, 0x42000100, 0x40080100,
					0x02000100, 0x40000000, 0x42080000, 0x02080100, 0x40080100,
					0x00000100, 0x02000000, 0x42080000, 0x42080100, 0x00080100,
					0x42000000, 0x42080100, 0x02080000, 0x00000000, 0x40080000,
					0x42000000, 0x00080100, 0x02000100, 0x40000100, 0x00080000,
					0x00000000, 0x40080000, 0x02080100, 0x40000100 },
			{ 0x20000010, 0x20400000, 0x00004000, 0x20404010, 0x20400000,
					0x00000010, 0x20404010, 0x00400000, 0x20004000, 0x00404010,
					0x00400000, 0x20000010, 0x00400010, 0x20004000, 0x20000000,
					0x00004010, 0x00000000, 0x00400010, 0x20004010, 0x00004000,
					0x00404000, 0x20004010, 0x00000010, 0x20400010, 0x20400010,
					0x00000000, 0x00404010, 0x20404000, 0x00004010, 0x00404000,
					0x20404000, 0x20000000, 0x20004000, 0x00000010, 0x20400010,
					0x00404000, 0x20404010, 0x00400000, 0x00004010, 0x20000010,
					0x00400000, 0x20004000, 0x20000000, 0x00004010, 0x20000010,
					0x20404010, 0x00404000, 0x20400000, 0x00404010, 0x20404000,
					0x00000000, 0x20400010, 0x00000010, 0x00004000, 0x20400000,
					0x00404010, 0x00004000, 0x00400010, 0x20004010, 0x00000000,
					0x20404000, 0x20000000, 0x00400010, 0x20004010 },
			{ 0x00200000, 0x04200002, 0x04000802, 0x00000000, 0x00000800,
					0x04000802, 0x00200802, 0x04200800, 0x04200802, 0x00200000,
					0x00000000, 0x04000002, 0x00000002, 0x04000000, 0x04200002,
					0x00000802, 0x04000800, 0x00200802, 0x00200002, 0x04000800,
					0x04000002, 0x04200000, 0x04200800, 0x00200002, 0x04200000,
					0x00000800, 0x00000802, 0x04200802, 0x00200800, 0x00000002,
					0x04000000, 0x00200800, 0x04000000, 0x00200800, 0x00200000,
					0x04000802, 0x04000802, 0x04200002, 0x04200002, 0x00000002,
					0x00200002, 0x04000000, 0x04000800, 0x00200000, 0x04200800,
					0x00000802, 0x00200802, 0x04200800, 0x00000802, 0x04000002,
					0x04200802, 0x04200000, 0x00200800, 0x00000000, 0x00000002,
					0x04200802, 0x00000000, 0x00200802, 0x04200000, 0x00000800,
					0x04000002, 0x04000800, 0x00000800, 0x00200002 },
			{ 0x10001040, 0x00001000, 0x00040000, 0x10041040, 0x10000000,
					0x10001040, 0x00000040, 0x10000000, 0x00040040, 0x10040000,
					0x10041040, 0x00041000, 0x10041000, 0x00041040, 0x00001000,
					0x00000040, 0x10040000, 0x10000040, 0x10001000, 0x00001040,
					0x00041000, 0x00040040, 0x10040040, 0x10041000, 0x00001040,
					0x00000000, 0x00000000, 0x10040040, 0x10000040, 0x10001000,
					0x00041040, 0x00040000, 0x00041040, 0x00040000, 0x10041000,
					0x00001000, 0x00000040, 0x10040040, 0x00001000, 0x00041040,
					0x10001000, 0x00000040, 0x10000040, 0x10040000, 0x10040040,
					0x10000000, 0x00040000, 0x10001040, 0x00000000, 0x10041040,
					0x00040040, 0x10000040, 0x10040000, 0x10001000, 0x10001040,
					0x00000000, 0x10041040, 0x00041000, 0x00041000, 0x00001040,
					0x00001040, 0x00040040, 0x10000000, 0x10041000 } };

	// End of tables

	final static int ENCRYPTION = 0, DECRYPTION = 1;

	int kEnc[], kDec[];

	private boolean keyInited;

	/**
	 * The actual bytes of the encryption Key.
	 */
	protected byte encryptionKeyBytes[];

	/**
	 * The actual bytes of the decryption Key.
	 */
	protected byte decryptionKeyBytes[];

	public DES() // throws CoderException
	{
		// super();
		// padding = null;
		// initialize();
	}

	public void setKey(byte[] key)// (Key key)
	{
		decryptionKeyBytes = key;// setDecryptionKey(key);
		encryptionKeyBytes = key;// setEncryptionKey(key);
		// Added by william
		keyInited = false;

		kEnc = new int[32];
		kDec = new int[32];
		initKey(encryptionKeyBytes, kEnc, ENCRYPTION);
		initKey(encryptionKeyBytes, kDec, DECRYPTION);
	}

	public void decryptOp(byte in[], int inOff, byte out[], int outOff)
			throws Exception {

		// added by Selena
		if (!keyInited) {
			kEnc = new int[32];
			kDec = new int[32];
			initKey(encryptionKeyBytes, kEnc, ENCRYPTION);
			initKey(encryptionKeyBytes, kDec, DECRYPTION);
		}
		ProcessBlock(in, inOff, out, outOff, kDec);
		/* } */
	}

	public void encryptOp(byte in[], int inOff, byte out[], int outOff)
			throws Exception {
		// added by Selena
		if (!keyInited) {
			kEnc = new int[32];
			kDec = new int[32];
			initKey(encryptionKeyBytes, kEnc, ENCRYPTION);
			initKey(encryptionKeyBytes, kDec, DECRYPTION);
		}
		ProcessBlock(in, inOff, out, outOff, kEnc);
		/* } */
	}

	/**
	 * Fills the specified int array with a given value.
	 */

	public static void setArray(int arr[], int w) {
		if (arr == null)
			return;

		for (int i = 0; i < arr.length; i++)
			arr[i] = w;
	}

	/* Set key (initialize key schedule array) */
	void initKey(byte key[], int k[], int dir) {
		// Added by william
		keyInited = true;

		int pc1m[] = new int[56]; /* place to modify pc1 into */
		int pcr[] = new int[56]; /* place to rotate pc1 into */
		int ks[] = new int[8];

		int i, j, l;
		int m;
		int tmp;

		for (j = 0; j < 56; j++) { /* convert pc1 to bits of key */
			l = pc1[j] - 1; /* integer bit location */
			m = l & 07; /* find bit */
			pc1m[j] = ((key[l >> 3] & /* find which key byte l is in */
			bytebit[m]) != 0) /* and which bit of that byte */
			? 1 : 0; /* and store 1-bit result */
		}
		for (i = 0; i < 16; i++) { /* key chunk for each iteration */
			// Utils.setArray(ks, 0); /* Clear key schedule */
			setArray(ks, 0); // change by zjh
			for (j = 0; j < 56; j++)
				/* rotate pc1 the right amount */
				pcr[j] = pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l
						: l - 28];
			/* rotate left and right halves independently */
			for (j = 0; j < 48; j++) { /* select bits individually */
				/* check bit that goes to ks[j] */
				if (pcr[pc2[j] - 1] != 0) {
					/* mask it in if it's there */
					l = j % 6;
					ks[j / 6] |= bytebit[l] >> 2;
				}
			}
			/* Now convert to odd/even interleaved form for use in F */
			k[2 * i] = (ks[0] << 24) | (ks[2] << 16) | (ks[4] << 8) | (ks[6]);
			k[2 * i + 1] = (ks[1] << 24) | (ks[3] << 16) | (ks[5] << 8)
					| (ks[7]);
		}

		if (dir == DECRYPTION) // reverse key schedule order
			for (i = 0; i < 16; i += 2) {
				tmp = k[i];
				k[i] = k[32 - 2 - i];
				k[32 - 2 - i] = tmp;

				tmp = k[i + 1];
				k[i + 1] = k[32 - 1 - i];
				k[32 - 1 - i] = tmp;
			}
	}

	// Encrypt or decrypt a block of data in ECB mode
	void ProcessBlock(byte inBlock[], int inOff, byte outBlock[], int outOff,
			int k[]) {
		int work, work1;
		int halves[] = new int[2];

		int j = inOff;
		halves[0] = (((inBlock[j++] << 8) | (inBlock[j++] & 0xff)) << 16)
				| ((inBlock[j++] & 0xff) << 8) | (inBlock[j++] & 0xff);
		halves[1] = (((inBlock[j++] << 8) | (inBlock[j++] & 0xff)) << 16)
				| ((inBlock[j++] & 0xff) << 8) | (inBlock[j++] & 0xff);
		// GETBLOCK(inBlock,inOff,halves);

		halves[1] = (halves[1] << 4) | (halves[1] >>> 28);
		work = (halves[0] ^ halves[1]) & 0xf0f0f0f0;
		halves[0] ^= work;
		halves[1] = ((work ^ halves[1]) >>> 20) | ((work ^ halves[1]) << 12);
		work = (halves[0] ^ halves[1]) & 0xffff0000;
		halves[0] ^= work;
		halves[1] = ((work ^ halves[1]) >>> 18) | ((work ^ halves[1]) << 14);
		work = (halves[0] ^ halves[1]) & 0x33333333;
		halves[0] ^= work;
		halves[1] = ((work ^ halves[1]) >>> 6) | ((work ^ halves[1]) << 26);
		work = (halves[0] ^ halves[1]) & 0x00ff00ff;
		halves[0] ^= work;
		halves[1] = ((work ^ halves[1]) << 9) | ((work ^ halves[1]) >>> 23);
		work = (halves[0] ^ halves[1]) & 0xaaaaaaaa;
		halves[1] ^= work;
		halves[0] = ((work ^ halves[0]) << 1) | ((work ^ halves[0]) >>> 31);
		// IPERM(halves);

		work = ((halves[1] >>> 4) | (halves[1] << 28)) ^ k[0];
		work1 = halves[1] ^ k[1];
		halves[0] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[0] >>> 4) | (halves[0] << 28)) ^ k[2];
		work1 = halves[0] ^ k[3];
		halves[1] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[1] >>> 4) | (halves[1] << 28)) ^ k[4];
		work1 = halves[1] ^ k[5];
		halves[0] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[0] >>> 4) | (halves[0] << 28)) ^ k[6];
		work1 = halves[0] ^ k[7];
		halves[1] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[1] >>> 4) | (halves[1] << 28)) ^ k[8];
		work1 = halves[1] ^ k[9];
		halves[0] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[0] >>> 4) | (halves[0] << 28)) ^ k[10];
		work1 = halves[0] ^ k[11];
		halves[1] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[1] >>> 4) | (halves[1] << 28)) ^ k[12];
		work1 = halves[1] ^ k[13];
		halves[0] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[0] >>> 4) | (halves[0] << 28)) ^ k[14];
		work1 = halves[0] ^ k[15];
		halves[1] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[1] >>> 4) | (halves[1] << 28)) ^ k[16];
		work1 = halves[1] ^ k[17];
		halves[0] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[0] >>> 4) | (halves[0] << 28)) ^ k[18];
		work1 = halves[0] ^ k[19];
		halves[1] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[1] >>> 4) | (halves[1] << 28)) ^ k[20];
		work1 = halves[1] ^ k[21];
		halves[0] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[0] >>> 4) | (halves[0] << 28)) ^ k[22];
		work1 = halves[0] ^ k[23];
		halves[1] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[1] >>> 4) | (halves[1] << 28)) ^ k[24];
		work1 = halves[1] ^ k[25];
		halves[0] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[0] >>> 4) | (halves[0] << 28)) ^ k[26];
		work1 = halves[0] ^ k[27];
		halves[1] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[1] >>> 4) | (halves[1] << 28)) ^ k[28];
		work1 = halves[1] ^ k[29];
		halves[0] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		work = ((halves[0] >>> 4) | (halves[0] << 28)) ^ k[30];
		work1 = halves[0] ^ k[31];
		halves[1] ^= Spbox[6][work & 0x3f] ^ Spbox[4][(work >> 8) & 0x3f]
				^ Spbox[2][(work >> 16) & 0x3f] ^ Spbox[0][(work >> 24) & 0x3f]
				^ Spbox[7][work1 & 0x3f] ^ Spbox[5][(work1 >> 8) & 0x3f]
				^ Spbox[3][(work1 >> 16) & 0x3f]
				^ Spbox[1][(work1 >> 24) & 0x3f];

		halves[1] = (halves[1] >>> 1) | (halves[1] << 31);
		work = (halves[0] ^ halves[1]) & 0xaaaaaaaa;
		halves[1] ^= work;
		halves[0] = ((work ^ halves[0]) >>> 9) | ((work ^ halves[0]) << 23);
		work = (halves[0] ^ halves[1]) & 0x00ff00ff;
		halves[1] ^= work;
		halves[0] = ((work ^ halves[0]) << 6) | ((work ^ halves[0]) >>> 26);
		work = (halves[0] ^ halves[1]) & 0x33333333;
		halves[1] ^= work;
		halves[0] = ((work ^ halves[0]) << 18) | ((work ^ halves[0]) >>> 14);
		work = (halves[0] ^ halves[1]) & 0xffff0000;
		halves[1] ^= work;
		halves[0] = ((work ^ halves[0]) << 20) | ((work ^ halves[0]) >>> 12);
		work = (halves[0] ^ halves[1]) & 0xf0f0f0f0;
		halves[1] ^= work;
		halves[0] = ((work ^ halves[0]) >>> 4) | ((work ^ halves[0]) << 28);
		// FPERM(halves);

		j = halves[0];
		halves[0] = halves[1];
		halves[1] = j;

		j = outOff;
		outBlock[j++] = (byte) (halves[0] >> 24);
		outBlock[j++] = (byte) (halves[0] >> 16);
		outBlock[j++] = (byte) (halves[0] >> 8);
		outBlock[j++] = (byte) halves[0];
		outBlock[j++] = (byte) (halves[1] >> 24);
		outBlock[j++] = (byte) (halves[1] >> 16);
		outBlock[j++] = (byte) (halves[1] >> 8);
		outBlock[j++] = (byte) halves[1];
		// PUTBLOCK(outBlock,outOff,halves);
	}

}
