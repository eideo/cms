<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  <display-name>Expo Web Application</display-name>
  <!-- ======================== 单点登录开始 ======================== -->    
    <!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置 -->    
    <listener>    
        <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>    
    </listener>    
    
    <!-- 该过滤器用于实现单点登出功能，可选配置。 -->    
    <filter>    
        <filter-name>CAS Single Sign Out Filter</filter-name>    
        <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>    
    </filter>    
    <filter-mapping>    
        <filter-name>CAS Single Sign Out Filter</filter-name>    
        <url-pattern>/user/*</url-pattern>    
    </filter-mapping>    
     <filter-mapping>    
        <filter-name>CAS Single Sign Out Filter</filter-name>    
        <url-pattern>/customerBehavior/user/*</url-pattern>    
    </filter-mapping>   
    <!-- 该过滤器负责用户的认证工作，必须启用它 -->    
    <filter>    
        <filter-name>CASFilter</filter-name>    
        <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>    
        <init-param>    
            <param-name>casServerLoginUrl</param-name>    
           <!--  <param-value>http://101.200.0.81:8080/cas/login</param-value>   -->  
            <param-value>http://www.cms.org/cas/login</param-value>    
            <!--这里的server是服务端的IP -->    
        </init-param>    
        <init-param>    
            <param-name>serverName</param-name>    
            <param-value>http://192.168.8.122:8080</param-value>  
        </init-param>    
    </filter>    
    <filter-mapping>    
        <filter-name>CASFilter</filter-name>    
        <url-pattern>/user/*</url-pattern>    
    </filter-mapping>    
    <filter-mapping>    
        <filter-name>CASFilter</filter-name>    
        <url-pattern>/customerBehavior/user/*</url-pattern>    
    </filter-mapping> 
    <!-- 该过滤器负责对Ticket的校验工作，必须启用它 -->    
    <filter>    
        <filter-name>CAS Validation Filter</filter-name>    
        <filter-class>    
            org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</filter-class>    
        <init-param>    
            <param-name>casServerUrlPrefix</param-name>    
             <!--  <param-value>http://101.200.0.81:8080/cas</param-value>   -->
            <param-value>http://www.cms.org/cas</param-value>    
        </init-param>    
        <init-param>    
            <param-name>serverName</param-name>    
            <param-value>http://192.168.8.122:8080</param-value>    
        </init-param>    
    </filter>    
    <filter-mapping>    
        <filter-name>CAS Validation Filter</filter-name>    
        <url-pattern>/*</url-pattern>    
    </filter-mapping>    
    
    <!-- 该过滤器负责实现HttpServletRequest请求的包裹， 比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。 -->    
    <filter>    
        <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>    
        <filter-class>    
            org.jasig.cas.client.util.HttpServletRequestWrapperFilter</filter-class>    
    </filter>    
    <filter-mapping>    
        <filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>    
        <url-pattern>/*</url-pattern>    
    </filter-mapping>    
    
    <!-- 该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。 比如AssertionHolder.getAssertion().getPrincipal().getName()。 -->    
    <filter>    
        <filter-name>CAS Assertion Thread Local Filter</filter-name>    
        <filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>    
    </filter>    
    <filter-mapping>    
        <filter-name>CAS Assertion Thread Local Filter</filter-name>    
        <url-pattern>/*</url-pattern>    
    </filter-mapping>    
    
    <!-- ======================== 单点登录结束 ======================== -->   
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>
  <filter>
    <filter-name>sitemeshFilter</filter-name>
    <filter-class>org.sitemesh.config.ConfigurableSiteMeshFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>sitemeshFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>
  <servlet>
    <servlet-name>SpringWeb</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-web.xml</param-value>
    </init-param>
    <init-param>
      <param-name>publishEvents</param-name>
      <param-value>false</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
    <async-supported>true</async-supported>
  </servlet>
  <servlet-mapping>
    <servlet-name>SpringWeb</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <servlet-name>SpringWeb</servlet-name>
  </filter-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.htm</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>
  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>
  <welcome-file-list>
    <welcome-file>/index.jsp</welcome-file>
  </welcome-file-list>
  <error-page>
    <error-code>500</error-code>
    <location>/error/error.jsp</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/error/404.jsp</location>
  </error-page>
</web-app>